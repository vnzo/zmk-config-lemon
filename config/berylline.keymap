#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

/* Layers */
#define DEF 0
#define EDT 1
#define NAV 2
#define PUN 3
#define MOU 4
#define TES 5
#define TES 6

/* Shortcuts */
#define CUT LC(X)
#define COPY LC(C)
#define PASTE LC(V)
#define UNDO LC(Z)
#define ALL LC(A)
#define TOP LC(HOME)
#define BTM LC(END)

/* Behavior Settings */
&sk {
  release-after-ms = <250>;
  quick-release;
};

&sl {
  release-after-ms = <250>;
};

/ {
    behaviors {
        home: home_ignoring_ctrl {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp HOME>, <&kp HOME>;
            mods = <(MOD_LCTL|MOD_RCTL)>;
        };
        end: end_ignoring_ctrl {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp END>, <&kp END>;
            mods = <(MOD_LCTL|MOD_RCTL)>;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <NAV SYM>;
            then-layer = <NUM>;
        };
    };

    combos {
        compatible = "zmk,combos";

        /*                KEY POSITIONS

             0   1   2   3   4      5   6   7   8   9
            10  11  12  13  14     15  16  17  18  19
                20  21  22             23  24  25
                        26  27     28  29              */

         /* Letters */
        v { key-positions = <0 1>; bindings = <&kp Q>; layers = <DEF>; };
        t { key-positions = <3 4>; bindings = <&kp QMARK>; layers = <DEF>; };
        q { key-positions = <10 11>; bindings = <&kp Q>; layers = <DEF>; };
        q { key-positions = <20 21>; bindings = <&kp ?>; layers = <DEF>; };
        q { key-positions = <21 22>; bindings = <&kp DEL>; layers = <DEF>; };
        q { key-positions = <3 4>; bindings = <&kp Q>; layers = <DEF>; };
        q { key-positions = <3 4>; bindings = <&kp Q>; layers = <DEF>; };
        z { key-positions = <20 21>; bindings = <&kp Z>; layers = <DEF>; };

        /* Brackets */
        lbkt { key-positions = <1 11>; bindings = <&kp LBKT>; layers = <DEF SYM NUM>; };
        rbkt { key-positions = <8 18>; bindings = <&kp RBKT>; layers = <DEF SYM NUM>; };
        lpar { key-positions = <2 12>; bindings = <&kp LPAR>; layers = <DEF SYM NUM>; };
        rpar { key-positions = <7 17>; bindings = <&kp RPAR>; layers = <DEF SYM NUM>; };
        lbrc { key-positions = <3 13>; bindings = <&kp LBRC>; layers = <DEF SYM NUM>; };
        rbrc { key-positions = <6 16>; bindings = <&kp RBRC>; layers = <DEF SYM NUM>; };

        /* Convenience */
        del { key-positions = <20 21>; bindings = <&kp DEL>; };
        esc { key-positions = <7 8>; bindings = <&kp ESC>; };
        del { key-positions = <1 2>; bindings = <&kp TAB>; };
        all { key-positions = <20 21>; bindings = <&kp ALL>; layers = <NAV>; };
    };

    keymap {
        compatible = "zmk,keymap";
        default_layer {
            bindings = <
                &kp Q     &kp H     &kp O     &kp U     &kp DOT     &kp D     &kp C     &kp R     &kp F     &kp B
                &kp Y     &kp I     &kp E     &kp A     &kp ASTRK   &kp W     &kp T     &kp S     &kp N     &kp V
                          &kp X     &kp COMMA &kp K                           &kp M     &kp L     &kp P
                                    &kp BSPC  &kp ENTER             &kp SPACE &kp DEL
            >;
        };
        nav_layer {
            bindings = <
                &kp F1    &kp F2    &kp F3    &kp F4    &kp F5      &kp TOP   &kp ESC   &kp UARW  &kp TAB   &home
                &kp LGUI  &kp LALT  &kp LSHFT &kp LCTRL &kp UNDO    &kp BTM   &kp LARW  &kp ENTER &kp RARW  &end
                          &kp CUT   &kp COPY  &kp PASTE                       &kp BSPC  &kp DARW  &kp DEL
                                              &trans    &trans      &trans    &trans
            >;
        };
        sym_layer {
            bindings = <
                &kp EXCL  &kp AT    &kp HASH  &kp DLLR  &kp PRCNT   &kp CARET &kp AMPS  &kp SEMI  &kp COLON &kp QMARK
                &kp TILDE &kp EQUAL &kp MINUS &kp FSLH  &kp GRAVE   &kp BSLH  &kp LCTRL &kp LSHFT &kp LALT  &kp LGUI
                          &kp UNDER &kp PLUS  &kp ASTRK                       &kp PIPE  &kp LT    &kp GT
                                              &trans    &trans      &trans    &trans
            >;
        };
        num_layer {
            bindings = <
                &none     &none     &none     &none     &none       &none     &none     &none     &none     &none 
                &kp N1    &kp N2    &kp N3    &kp N4    &kp N5      &kp N6    &kp N7    &kp N8    &kp N9    &kp N0
                          &none     &none     &none                           &none     &none     &none
                                              &trans    &trans      &trans    &trans
            >;
        };
    };
};
