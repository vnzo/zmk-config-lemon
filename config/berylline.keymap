/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/* Layers */

#define DEF_L 0
#define NAV_L 1
#define SYM_L 2
#define NUM_L 3

/* Shortcuts */

#define CUT LC(X)
#define COPY LC(C)
#define PASTE LC(V)
#define UNDO LC(Z)
#define SLALL LC(A)

/* Behavior Settings */

&sk {
    release-after-ms = <250>;
    quick-release;
};

&sl { release-after-ms = <250>; };

/ {
    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri_layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };

    combos {
        compatible = "zmk,combos";

        /*                KEY POSITIONS

             0   1   2   3   4      5   6   7   8   9
            10  11  12  13  14     15  16  17  18  19
                20  21  22             23  24  25
                        26  27     28  29              */
        /* Letters */
        /* Brackets */
        /* Convenience */

        de {
            bindings = <&de>;
            key-positions = <12 2>;
        };

        an {
            bindings = <&none>;
            key-positions = <10>;
        };
    };

    macros {
        de: de {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp D &kp E>;
            label = "DE";
        };

        an: an {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp A &kp N>;
            label = "AN";
        };
    };

    behaviors {
        dtan: dtan {
            compatible = "zmk,behavior-tap-dance";
            label = "DTAN";
            #binding-cells = <0>;
            bindings = <&kp A>, <&an>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&mt ESCAPE Q  &bt BT_CLR_ALL  &kp E  &kp R  &kp T  &kp Y  &kp U  &kp I  &kp O  &kp P  &bt BT_CLR_ALL  &kp S  &kp D  &kp F  &kp G  &kp H  &kp J  &kp K  &kp L  &kp Z  &mt K_CUT X  &mt K_COPY C  &mt K_PASTE V  &kp B  &kp N  &kp M  &mt LEFT_SHIFT ENTER  &lt 1 SPACE  &lt 2 SPACE  &kp BACKSPACE
            >;
        };

        nav_layer {
            label = "Nav";
            bindings = <
&kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp NUMBER_5  &kp N6  &kp NUMBER_7  &kp N8  &kp N9  &kp N0  &kp DEL  &trans  &kp UP_ARROW  &trans  &trans  &mt RS(MINUS) MINUS  &mt RS(EQUAL) EQUAL  &mt RS(SEMICOLON) SEMICOLON  &mt RS(SQT) SQT  &mt RS(SLASH) SLASH  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &trans  &mt RS(COMMA) COMMA  &mt RS(DOT) DOT  &trans  &trans  &kp K_STOP  &trans
            >;
        };

        sym_layer {
            label = "Sym";
            bindings = <
&kp F1  &kp F2  &kp F5  &kp F11  &kp F12  &trans  &trans  &trans  &trans  &trans  &bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &trans  &kp RIGHT_ALT  &trans  &kp C_VOLUME_UP  &trans  &trans  &bt BT_DISC 0  &bt BT_DISC 1  &bt BT_SEL 2  &kp K_PREVIOUS  &kp C_VOL_DN  &kp K_NEXT  &trans  &lt 3 SPACE  &trans  &trans
            >;
        };

        num_layer {
            label = "Num";
            bindings = <
&none  &none  &none  &none  &none  &none  &none  &none  &none  &none  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &none  &none  &none  &none  &none  &none  &trans  &trans  &trans  &trans
            >;
        };
    };
};
