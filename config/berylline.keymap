#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

/* Layers */

#define DEF 0
#define EDT 1
#define NAV 2
#define PUN 3
#define MOU 4
#define TES 5
#define TES 6

/* Shortcuts */

#define CUT LC(X)
#define COPY LC(C)
#define PASTE LC(V)
#define UNDO LC(Z)
#define ALL LC(A)
#define TOP LC(HOME)
#define BTM LC(END)

/* Behavior Settings */

&sk {
    release-after-ms = <250>;
    quick-release;
};

&sl { release-after-ms = <250>; };

/ {
    behaviors {
        home: home_ignoring_ctrl {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp HOME>, <&kp HOME>;

            mods = <(MOD_LCTL|MOD_RCTL)>;
        };

        end: end_ignoring_ctrl {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp END>, <&kp END>;

            mods = <(MOD_LCTL|MOD_RCTL)>;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri_layer {
            if-layers = <NAV SYM>;
            then-layer = <NUM>;
        };
    };

    combos {
        compatible = "zmk,combos";

        /*                KEY POSITIONS

             0   1   2   3   4      5   6   7   8   9
            10  11  12  13  14     15  16  17  18  19
                20  21  22             23  24  25
                        26  27     28  29              */
        /* Letters */

        q {
            key-positions = <0 1>;
            bindings = <&kp Q>;
            layers = <DEF>;
        };

        qmark {
            key-positions = <3 4>;
            bindings = <&kp QUESTION>;
            layers = <DEF>;
        };

        lshitf {
            key-positions = <10 11>;
            bindings = <&kp LEFT_SHIFT>;
            layers = <DEF>;
        };

        qmark2 {
            key-positions = <20 21>;
            bindings = <&kp QUESTION>;
            layers = <DEF>;
        };

        del {
            key-positions = <21 22>;
            bindings = <&kp DEL>;
            layers = <DEF>;
        };

        /* Brackets */
        /* Convenience */

        esc {
            key-positions = <1 2>;
            bindings = <&kp TAB>;
        };

        tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <7 8>;
        };

        rshift {
            bindings = <&kp LS(RIGHT_SHIFT)>;
            key-positions = <19 18>;
        };

        rshift {
            bindings = <&kp RIGHT_SHIFT>;
            key-positions = <23 24>;
        };

        l-ctrl {
            bindings = <&kp LCTRL>;
            key-positions = <2 12>;
        };

        r-ctrl {
            bindings = <&kp RCTRL>;
            key-positions = <7 17>;
        };

        lbraket {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <1 11>;
        };

        rparen {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <18 8>;
        };

        esc {
            bindings = <&kp ESCAPE>;
            key-positions = <0 10>;
        };

        enter {
            bindings = <&kp ENTER>;
            key-positions = <9 19>;
        };

        pgup {
            bindings = <&kp PAGE_UP>;
            key-positions = <3 13>;
        };

        pgdn {
            bindings = <&kp PAGE_DOWN>;
            key-positions = <22 13>;
        };

        del {
            bindings = <&kp DELETE>;
            key-positions = <4 14>;
        };

        esc {
            bindings = <&kp HOME>;
            key-positions = <15 5>;
        };

        home {
            bindings = <&kp HOME>;
            key-positions = <6 16>;
        };

        end {
            bindings = <&kp END>;
            key-positions = <16 23>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&lt 5 Y  &kp H  &kp O  &mt LEFT_WIN U  &kp PERIOD  &kp D  &kp C  &kp R  &kp F  &lt 6 B  &kp J  &kp I  &kp E  &mt LEFT_SHIFT A  &kp SQT  &kp W  &kp T  &kp S  &kp N  &kp V  &mt LCTRL X  &kp COMMA  &kp K  &kp M  &kp L  &kp P  &lt 1 BACKSPACE  &lt 2 ENTER  &lt 3 SPACE  &lt 4 DELETE
            >;
        };

        nav_layer {
            bindings = <
&kp F1  &kp F2  &kp F3  &kp F4  &kp F5  &kp TOP  &kp ESC  &kp UARW  &kp TAB  &home  &kp LGUI  &kp LALT  &kp LSHFT  &kp LCTRL  &kp UNDO  &kp BTM  &kp LARW  &kp ENTER  &kp RARW  &end  &kp CUT  &kp COPY  &kp PASTE  &kp BSPC  &kp DARW  &kp DEL  &trans  &trans  &trans  &trans
            >;
        };

        sym_layer {
            bindings = <
&kp EXCL  &kp AT  &kp HASH  &kp DLLR  &kp PRCNT  &kp CARET  &kp AMPS  &kp SEMI  &kp COLON  &kp QMARK  &kp TILDE  &kp EQUAL  &kp MINUS  &kp FSLH  &kp GRAVE  &kp BSLH  &kp LCTRL  &kp LSHFT  &kp LALT  &kp LGUI  &kp UNDER  &kp PLUS  &kp ASTRK  &kp PIPE  &kp LT  &kp GT  &trans  &trans  &trans  &trans
            >;
        };

        num_layer {
            bindings = <
&none  &none  &none  &none  &none  &none  &none  &none  &none  &none  &kp N1  &kp N2  &kp N3  &kp N4  &kp N5  &kp N6  &kp N7  &kp N8  &kp N9  &kp N0  &none  &none  &none  &none  &none  &none  &trans  &trans  &trans  &trans
            >;
        };

        layer_4 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };

        blu-layer {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };

        med-layer {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };
    };
};
